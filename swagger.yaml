components:
  schemas:

    Error:
      type: object
      properties:
        message:
          type: string

    AuthUrlResponse:
      type: string

    AuthUrlResponseSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/AuthUrlResponse'


    AuthDTO:
      type: object
      properties:
        code: 
          type: string
          required: true

    UserLoginResponse:
      type: object
      properties:
        name: 
          type: string
        email: 
          type: string
        _id: 
          type: string
          format: hex
        accessToken: 
          type: string
        refreshoken: 
          type: string

    UserLoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/UserLoginResponse'

    AuthTokenDTO:
      type: object
      properties:
        accessToken: 
          type: string
        refreshToken: 
          type: string

    AuthTokenResponse:
      $ref: '#components/schemas/AuthTokenDTO'

    AuthTokenResponseSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/AuthTokenResponse'

    GetBookingResponse:
      type: array
      items:
        type: object
        properties:
          startTime: 
            type: string
          endTime: 
            type: string
          status: 
            type: string

    GetBookingResponseSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/GetBookingResponse'

    AddInviteeDTO:
      type: object
      properties:
        name: 
          type: string
        email: 
          type: string
          format: email
        start: 
          type: string
          format: date-time

    MeetingResponse:
      type: object
      properties:
        _id: 
          type: string
          format: hex
        invitee: 
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
              email: 
                type: string
                format: email              
        start: 
          type: string
          format: date-time
        end: 
          type: string
          format: date-time
        type: 
          type: string
        description: 
          type: string
        summary:  
          type: string
        host: 
          type: string
          format: hex

    MeetingResponseSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/MeetingResponse'

    MeetingResponsePagedResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#components/schemas/MeetingResponse'
        meta:
          $ref: '#components/schemas/Meta'

    CreateEventDTO:
      type: object
      properties:  
        durationInMins:
          type: integer
          format: int32
        intervalBreak:
          type: integer
          format: int32
        startTime: 
          type: string
          format: date-time
        endTime: 
          type: string
          format: date-time
        type: 
          type: string
        description: 
          type: string
        summary:  
          type: string
        slug:  
          type: string

    UpdateEventDTO:
      $ref: '#components/schemas/CreateEventDTO'

    EventResponse:
      type: object
      properties:
        _id: 
          type: string
          format: hex     
        durationInMins:
          type: integer
          format: int32
        intervalBreak:
          type: integer
          format: int32
        startTime: 
          type: string
          format: date-time
        endTime: 
          type: string
          format: date-time
        type: 
          type: string
        description: 
          type: string
        summary:  
          type: string
        user: 
          type: string
          format: hex
        slug:  
          type: string

    EventResponseSuccessResponse:
      type: object
      properties:
        message:
          type: string
        data: 
          $ref: '#components/schemas/EventResponse'

    EventResponsePagedResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#components/schemas/EventResponse'
        meta:
          $ref: '#components/schemas/Meta'

    Meta:
      type: object
      properties:
        nextPage: 
          type: integer
          format: int32
          nullable: true
        previousPage: 
          type: integer
          format: int32
          nullable: true
        totalPages: 
          type: integer
          format: int32
        pageSize: 
          type: integer
          format: int32
        total: 
          type: integer
          format: int32         

    EventType:
      type: array
      items: 
        type: string

  parameters:

    googleAuthCodeParameter:
      in: query
      name: code
      description: google auth code
      schema:
        type: string
      required: true

    getAvailabilityParameter:
      in: query
      name: date
      description: date to get availability
      schema:
        type: string
        format: date

    eventIdParameter:
      in: path
      name: eventId
      description: eventId to make a booking
      schema:
        type: string
        format: hex
      required: true

    idParameter:
      in: path
      name: id
      description: id for path
      schema:
        type: string
        format: hex
      required: true

    pageNumberParameter:
      in: query
      name: pageNumber
      description: Page Number to retrieve
      schema:
        type: integer
        minimum: 1
        format: int32

    pageSizeParameter:
      in: query
      name: pageSize
      description: Page Size to retrieve
      schema:
        type: integer
        minimum: 1
        format: int32

    searchParameter:
      in: query
      name: search
      description: search value
      schema:
        type: string

    sortParameter:
      in: query
      name: sort
      description: Field to sort by. Only formats allowed are -yourSortField or yourSortField
      schema:
        type: string

    eventTypeParameter:
      in: query
      name: type
      description: EventType to filter by
      schema:
        $ref: '#components/schemas/EventType'
      style: form
      explode: true

    inviteeEmailParameter:
      in: query
      name: inviteeEmail
      description: inviteeEmail to filter by
      schema:
        type: array
        items: 
          type: string
          format: email
      style: form
      explode: true

    minStartParameter:
      in: query
      name: minStart
      description: Min Start DateTime
      schema: 
        type: string
        format: date-time

    maxEndParameter:
      in: query
      name: maxEnd
      description: Max End DateTime
      schema: 
        type: string
        format: date-time

  responses:

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Error occurred while processing this request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
- name: Auth
  description: Auth API

- name: Booking
  description: Booking API

- name: Meeting
  description: Meeting API

- name: Event
  description: Event API

paths:
  /auth/google:
    get:
      tags:
      - Auth
      description: Returns google auth url. Use this link to Login and Authorize CalendarA to access your google details.
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/AuthUrlResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/AuthUrlResponseSuccessResponse'

  /auth/google/callback:
    get:
      tags:
      - Auth
      description: Returns user profile, auth details. This is a callback function from /auth/google.
      parameters:
        - $ref: '#components/parameters/googleAuthCodeParameter'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserLoginSuccessResponse'
                example:
                  $ref: '#components/schemas/UserLoginSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        500:
          $ref: '#components/responses/InternalServerError'

  /auth/token/refresh:
    post:
      tags:
      - Auth
      description: Refreshes the access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenDTO'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/AuthTokenResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/AuthTokenResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'

  /booking/event/{eventId}:
    get:
      tags:
      - Booking
      description: Returns host availability
      parameters:
        - $ref: '#components/parameters/eventIdParameter'
        - $ref: '#components/parameters/getAvailabilityParameter'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/GetBookingResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/GetBookingResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        404:
          $ref: '#components/responses/NotFound'
        500:
          $ref: '#components/responses/InternalServerError'

    post:
      tags:
      - Booking
      description: Books the invitee
      parameters:
        - $ref: '#components/parameters/eventIdParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInviteeDTO'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/MeetingResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/MeetingResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        404:
          $ref: '#components/responses/NotFound'
        500:
          $ref: '#components/responses/InternalServerError'

  /meetings:
    get:
      tags:
      - Meeting
      description: Returns scheduled meetings for a host
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#components/parameters/pageNumberParameter'
        - $ref: '#components/parameters/pageSizeParameter'
        - $ref: '#components/parameters/searchParameter'
        - $ref: '#components/parameters/sortParameter'
        - $ref: '#components/parameters/eventTypeParameter'
        - $ref: '#components/parameters/inviteeEmailParameter'
        - $ref: '#components/parameters/minStartParameter'
        - $ref: '#components/parameters/maxEndParameter'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/MeetingResponsePagedResponse'
                example:
                  $ref: '#components/schemas/MeetingResponsePagedResponse'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'

  /events:
    get:
      tags:
      - Event
      description: Returns evevnt for a user
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#components/parameters/pageNumberParameter'
        - $ref: '#components/parameters/pageSizeParameter'
        - $ref: '#components/parameters/searchParameter'
        - $ref: '#components/parameters/sortParameter'
        - $ref: '#components/parameters/eventTypeParameter'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/EventResponsePagedResponse'
                example:
                  $ref: '#components/schemas/EventResponsePagedResponse'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'

    post:
      tags:
      - Event
      description: Creates an event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventDTO'
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/EventResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/EventResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'
        404:
          $ref: '#components/responses/NotFound'

  /events/{id}:
    get:
      tags:
      - Event
      description: Returns an event for a user
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#components/parameters/idParameter'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/EventResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/EventResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'
        404:
          $ref: '#components/responses/NotFound'

    put:
      tags:
      - Event
      description: Updates an event
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#components/parameters/idParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventDTO'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/EventResponseSuccessResponse'
                example:
                  $ref: '#components/schemas/EventResponseSuccessResponse'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'
        404:
          $ref: '#components/responses/NotFound'

    delete:
      tags:
      - Event
      description: deletes an event
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#components/parameters/idParameter'
      responses:
        204:
          description: 'No Content'
        400:
          $ref: '#components/responses/BadRequest'
        401:
          $ref: '#components/responses/Unauthorized'
        404:
          $ref: '#components/responses/NotFound'

schemes:
 - https
 - http